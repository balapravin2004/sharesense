// components/UploadButtonAndModalWrapper.jsx
import React, { useState } from "react";
import UploadModal from "./UploadModal";
import FilesTable from "./FilesTable";

export default function UploadButtonAndModalWrapper() {
  const [open, setOpen] = useState(false);
  return (
    <div className="p-4">
      <div className="flex items-center justify-between mb-6">
        <div className="text-xl font-semibold">Files</div>
        <button
          onClick={() => setOpen(true)}
          className="px-4 py-2 rounded-lg bg-blue-600 text-white shadow hover:brightness-95">
          Upload files
        </button>
      </div>

      <FilesTable />

      <UploadModal open={open} onClose={() => setOpen(false)} />
    </div>
  );
}



// store/uploadSlice.js
import { createSlice } from "@reduxjs/toolkit";
import axios from "axios";

// Outside Redux: keep non-serializable things here
const fileControllers = new Map(); // tempId -> { file, cancelSource }

// Thunk for uploading a single file
export const uploadFileDirect =
  ({ file, token, tempId }) =>
  async (dispatch) => {
    const source = axios.CancelToken.source();
    fileControllers.set(tempId, { file, cancelSource: source });

    // add entry to Redux with serializable metadata only
    dispatch(
      addUploading({
        tempId,
        name: file.name,
        size: file.size,
        type: file.type,
        progress: 0,
      })
    );

    const form = new FormData();
    form.append("files", file, file.name);

    try {
      const res = await axios.post("/api/upload", form, {
        headers: {
          "Content-Type": "multipart/form-data",
          ...(token ? { Authorization: `Bearer ${token}` } : {}),
        },
        onUploadProgress: (e) => {
          const percent = e.total ? Math.round((e.loaded * 100) / e.total) : 0;
          dispatch(setFileProgress({ tempId, progress: percent }));
        },
        cancelToken: source.token,
      });

      dispatch(finUpload({ tempId, file: res.data.files[0] }));
      fileControllers.delete(tempId);
    } catch (e) {
      if (axios.isCancel(e)) {
        dispatch(removeUploading(tempId));
      } else {
        dispatch(
          setUploadError({ tempId, error: e.message || "Upload failed" })
        );
      }
      fileControllers.delete(tempId);
    }
  };

const uploadSlice = createSlice({
  name: "uploads",
  initialState: {
    uploading: {}, // tempId -> { name, size, type, progress, error? }
    files: [], // completed files
  },
  reducers: {
    addUploading: (state, action) => {
      const { tempId, name, size, type, progress } = action.payload;
      state.uploading[tempId] = { name, size, type, progress };
    },
    setFileProgress: (state, action) => {
      const { tempId, progress } = action.payload;
      if (state.uploading[tempId]) {
        state.uploading[tempId].progress = progress;
      }
    },
    finUpload: (state, action) => {
      const { tempId, file } = action.payload;
      delete state.uploading[tempId];
      state.files.unshift(file);
    },
    removeUploading: (state, action) => {
      delete state.uploading[action.payload];
    },
    cancelUpload: (state, action) => {
      const tempId = action.payload;
      const ctrl = fileControllers.get(tempId);
      if (ctrl) {
        ctrl.cancelSource.cancel("user_cancel");
        fileControllers.delete(tempId);
      }
      delete state.uploading[tempId];
    },
    setUploadError: (state, action) => {
      const { tempId, error } = action.payload;
      if (state.uploading[tempId]) {
        state.uploading[tempId].error = error;
      }
    },
    setFiles: (state, action) => {
      state.files = action.payload;
    },
  },
});

export const {
  addUploading,
  setFileProgress,
  finUpload,
  removeUploading,
  cancelUpload,
  setUploadError,
  setFiles,
} = uploadSlice.actions;

export default uploadSlice.reducer;


// components/FilesTable.jsx
import React, { useEffect } from "react";
import axios from "axios";
import { useDispatch, useSelector } from "react-redux";
import { setFiles } from "../store/uploadSlice";

export default function FilesTable() {
  const dispatch = useDispatch();
  const files = useSelector((s) => s.uploads.files);

  useEffect(() => {
    const load = async () => {
      try {
        const res = await axios.get("/api/alluploadedfiles");
        dispatch(setFiles(res.data.files));
      } catch (e) {
        console.error(e);
      }
    };
    load();
  }, [dispatch]);

  return (
    <div className="w-full">
      <div className="overflow-x-auto bg-white rounded-xl shadow p-4">
        <table className="w-full min-w-[600px]">
          <thead>
            <tr className="text-left text-sm text-gray-500">
              <th className="px-3 py-2">Filename</th>
              <th className="px-3 py-2">Type</th>
              <th className="px-3 py-2">Size</th>
              <th className="px-3 py-2">Uploaded At</th>
              <th className="px-3 py-2">Link</th>
            </tr>
          </thead>
          <tbody>
            {files.map((f) => (
              <tr key={f.id} className="border-t">
                <td className="px-3 py-3">{f.filename}</td>
                <td className="px-3 py-3">{f.mimeType}</td>
                <td className="px-3 py-3">{(f.size / 1024).toFixed(2)} KB</td>
                <td className="px-3 py-3">
                  {new Date(f.createdAt).toLocaleString()}
                </td>
                <td className="px-3 py-3">
                  <a
                    className="text-blue-600 underline"
                    href={f.url}
                    target="_blank"
                    rel="noreferrer">
                    Open
                  </a>
                </td>
              </tr>
            ))}
            {files.length === 0 && (
              <tr>
                <td
                  colSpan={5}
                  className="px-3 py-6 text-center text-sm text-gray-400">
                  No files yet
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}


// components/UploadModal.jsx
import React, { useRef } from "react";
import { useDispatch, useSelector } from "react-redux";
import { cancelUpload, uploadFileDirect } from "../store/uploadSlice";
import { v4 as uuidv4 } from "uuid";

const humanFileSize = (size) => {
  if (size === 0) return "0 B";
  const i = Math.floor(Math.log(size) / Math.log(1024));
  const sizes = ["B", "KB", "MB", "GB", "TB"];
  return (size / Math.pow(1024, i)).toFixed(2) + " " + sizes[i];
};

export default function UploadModal({ open, onClose }) {
  const dispatch = useDispatch();
  const token =
    typeof window !== "undefined" ? localStorage.getItem("authToken") : null;
  const { uploading } = useSelector((s) => s.uploads);

  const fileInputRef = useRef(null);
  const overlayRef = useRef();

  const onOutsideClick = (e) => {
    if (e.target === overlayRef.current) onClose();
  };

  const handleFiles = (fileList) => {
    Array.from(fileList).forEach((file) => {
      const tempId = uuidv4();
      dispatch(uploadFileDirect({ file, token, tempId }));
    });
  };

  const onDrop = (e) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.dataTransfer?.files) handleFiles(e.dataTransfer.files);
  };

  const onSelectFiles = (e) => {
    if (e.target.files) handleFiles(e.target.files);
    e.target.value = null;
  };

  if (!open) return null;

  return (
    <div
      ref={overlayRef}
      onClick={onOutsideClick}
      className="fixed inset-0 z-50 bg-black/40 flex items-center justify-center p-4">
      <div
        onClick={(e) => e.stopPropagation()}
        className="w-full max-w-3xl bg-white  rounded-2xl shadow-2xl p-6 sm:p-8">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold">Upload files</h3>
          <button
            onClick={onClose}
            className="text-gray-500 hover:text-gray-800">
            Close
          </button>
        </div>

        <div
          onDrop={onDrop}
          onDragOver={(e) => e.preventDefault()}
          className="border-2 border-dashed border-gray-300 rounded-xl p-6 flex flex-col items-center justify-center gap-4">
          <div className="text-center">
            <p className="font-medium">Drag & drop files here</p>
            <p className="text-sm text-gray-500">or</p>
          </div>

          <div className="flex gap-3 flex-wrap justify-center">
            <label className="px-4 py-2 bg-blue-600 text-white rounded-lg cursor-pointer">
              Upload files
              <input
                ref={fileInputRef}
                type="file"
                multiple
                onChange={onSelectFiles}
                className="hidden"
              />
            </label>
            <button
              className="px-4 py-2 border rounded-lg"
              onClick={() => fileInputRef.current?.click()}>
              Choose from computer
            </button>
          </div>

          <p className="text-xs text-gray-400 mt-1">
            You can upload multiple files â€” images, docs, audio, video, etc.
          </p>
        </div>

        {/* Uploading list */}
        <div className="mt-6">
          <h4 className="text-sm font-medium mb-2">Uploading</h4>
          <div className="space-y-3 max-h-56 overflow-auto">
            {Object.entries(uploading).length === 0 && (
              <div className="text-sm text-gray-500">No active uploads</div>
            )}
            {Object.entries(uploading).map(([tempId, entry]) => (
              <div
                key={tempId}
                className="flex items-center justify-between gap-3 p-3 rounded-lg border">
                <div className="flex items-center gap-3">
                  <div className="w-12 h-12 bg-gray-100 rounded-md flex items-center justify-center text-xs">
                    {entry.name.split(".").pop()?.toUpperCase() || "F"}
                  </div>
                  <div>
                    <div className="font-medium text-sm">{entry.name}</div>
                    <div className="text-xs text-gray-500">
                      {entry.type || "â€”"} â€¢ {humanFileSize(entry.size)}
                    </div>
                    <div className="mt-2 w-full bg-gray-200 h-2 rounded">
                      <div
                        style={{ width: `${entry.progress}%` }}
                        className="h-2 rounded bg-blue-600"
                      />
                    </div>
                  </div>
                </div>

                <div className="flex items-center gap-3">
                  <div className="text-xs text-gray-600">{entry.progress}%</div>
                  <button
                    onClick={() => dispatch(cancelUpload(tempId))}
                    className="px-3 py-1 rounded bg-red-50 text-red-600 text-sm">
                    âœ•
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}
